(function (trackingId, projectId) {
  // Hardcoded API URLs
  var apiUrl = 'https://ovaagxrbaxxhlrhbyomt.supabase.co/functions/v1/track';
  var behaviorUrl = 'https://ovaagxrbaxxhlrhbyomt.supabase.co/functions/v1/track-behavior';
  var sessionReplayUrl = 'https://ovaagxrbaxxhlrhbyomt.supabase.co/functions/v1/track-session-replay';
  var pageLoadTime = Date.now();
  var behaviorBuffer = [];
  var lastScrollDepth = 0;
  var lastActivityTime = Date.now();
  var clickTimes = [];
  var isIdle = false;
  var idleTimeout = null;
  
  // Session Replay Configuration
  var sessionReplayEnabled = sessionReplayUrl && sessionReplayUrl !== 'undefined';
  var sessionReplayBuffer = [];
  var sessionReplayRecorder = null;

  function getSessionId() {
    var sessionId = sessionStorage.getItem("analytics_session");
    if (!sessionId) {
      sessionId = "sess_" + Math.random().toString(36).substr(2, 9) + "_" + Date.now();
      sessionStorage.setItem("analytics_session", sessionId);
      console.log("🆕 New session created:", sessionId);
    } else {
      console.log("🔄 Using existing session:", sessionId);
    }
    return sessionId;
  }

  function getUTMParams() {
    var params = new URLSearchParams(window.location.search);
    return {
      utm_source: params.get("utm_source"),
      utm_medium: params.get("utm_medium"),
      utm_campaign: params.get("utm_campaign"),
    };
  }

  function track(eventType, data) {
    var utmParams = getUTMParams();
    var payload = {
      tracking_id: trackingId,
      session_id: getSessionId(),
      event_type: eventType,
      path: window.location.pathname + window.location.search,
      referrer: document.referrer || null,
      user_agent: navigator.userAgent,
      screen_width: window.screen.width,
      screen_height: window.screen.height,
      viewport_width: window.innerWidth,
      viewport_height: window.innerHeight,
      language: navigator.language,
      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
      utm_source: utmParams.utm_source,
      utm_medium: utmParams.utm_medium,
      utm_campaign: utmParams.utm_campaign,
      duration: eventType === "pageview_end" ? Date.now() - pageLoadTime : null,
    };

    Object.assign(payload, data);

    console.log("🔍 Tracking event:", eventType, "Path:", payload.path, "Session:", payload.session_id);

    // Store in localStorage as backup if API fails
    var backupKey = "analytics_backup_" + Date.now();
    localStorage.setItem(backupKey, JSON.stringify(payload));

    fetch(apiUrl, {
      method: "POST",
      headers: { 
        "Content-Type": "application/json"
      },
      body: JSON.stringify(payload),
    })
      .then(function (response) {
        console.log("✅ Track response:", response.status, "for path:", payload.path);
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        // Remove backup on success
        localStorage.removeItem(backupKey);
        return response.json();
      })
      .then(function (data) {
        console.log("✅ Track success:", data);
      })
      .catch(function (e) {
        console.error("❌ Analytics error:", e.message, "for path:", payload.path);
        console.error("❌ Data backed up to localStorage with key:", backupKey);
        console.error("❌ Full error:", e);
      });
  }

  function sendBehavior(events) {
    if (events.length === 0) return;

    console.log("Sending behavior events:", events.length);

    fetch(behaviorUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        projectId: projectId,
        sessionId: getSessionId(),
        events: events,
      }),
    })
      .then(function (response) {
        console.log("Behavior response:", response.status);
        return response.json();
      })
      .then(function (data) {
        console.log("Behavior success:", data);
      })
      .catch(function (e) {
        console.error("Behavior tracking error:", e);
      });
  }

  function sendSessionReplay(events) {
    if (!sessionReplayEnabled || events.length === 0) return;

    console.log("Sending session replay events:", events.length);

    fetch(sessionReplayUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        projectId: projectId,
        sessionId: getSessionId(),
        events: events,
        metadata: {
          userAgent: navigator.userAgent,
          screenWidth: window.screen.width,
          screenHeight: window.screen.height,
          viewportWidth: window.innerWidth,
          viewportHeight: window.innerHeight,
          url: window.location.href,
          timestamp: Date.now()
        }
      }),
    })
      .then(function (response) {
        console.log("Session replay response:", response.status);
        return response.json();
      })
      .then(function (data) {
        console.log("Session replay success:", data);
      })
      .catch(function (e) {
        console.error("Session replay error:", e);
      });
  }

  function addBehaviorEvent(type, data) {
    behaviorBuffer.push({
      type: type,
      data: data,
      path: window.location.pathname,
      timestamp: Date.now(),
    });

    console.log("Behavior event added:", type, "Buffer size:", behaviorBuffer.length);

    if (behaviorBuffer.length >= 10) {
      sendBehavior(behaviorBuffer.slice());
      behaviorBuffer = [];
    }
  }

  function resetIdleTimer() {
    lastActivityTime = Date.now();
    if (isIdle) {
      addBehaviorEvent("idle", { ended: true, duration: Date.now() - lastActivityTime });
      isIdle = false;
    }
    if (idleTimeout) clearTimeout(idleTimeout);
    idleTimeout = setTimeout(function () {
      isIdle = true;
      addBehaviorEvent("idle", { started: true, duration: 30000 });
    }, 30000);
  }

  window.addEventListener(
    "scroll",
    function () {
      resetIdleTimer();
      var scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      var docHeight = document.documentElement.scrollHeight - window.innerHeight;
      var scrollPercent = docHeight > 0 ? Math.round((scrollTop / docHeight) * 100) : 0;

      if (Math.abs(scrollPercent - lastScrollDepth) >= 5) {
        addBehaviorEvent("scroll", { depth: scrollPercent, position: scrollTop });
        lastScrollDepth = scrollPercent;
      }
    },
    { passive: true },
  );

  window.addEventListener("click", function (e) {
    resetIdleTimer();
    var now = Date.now();
    clickTimes.push(now);
    clickTimes = clickTimes.filter(function (t) {
      return now - t < 1000;
    });

    var clickData = {
      x: e.clientX,
      y: e.clientY,
      element: e.target.tagName,
      text: (e.target.textContent || "").substring(0, 50),
    };

    if (clickTimes.length >= 3) {
      addBehaviorEvent("rage_click", Object.assign({}, clickData, { count: clickTimes.length }));
      clickTimes = [];
    } else {
      addBehaviorEvent("click", clickData);
    }
  });

  window.addEventListener("focusin", function (e) {
    if (e.target.tagName === "INPUT" || e.target.tagName === "TEXTAREA" || e.target.tagName === "SELECT") {
      var form = e.target.closest("form");
      addBehaviorEvent("form", {
        action: "start",
        field: e.target.name || e.target.id,
        formId: form ? form.id : "unknown",
      });
    }
  });

  document.addEventListener("submit", function (e) {
    addBehaviorEvent("form", {
      action: "complete",
      formId: e.target.id || "unknown",
    });
  });

  document.addEventListener("keypress", resetIdleTimer);

  var mouseMoveTimeout;
  document.addEventListener("mousemove", function () {
    clearTimeout(mouseMoveTimeout);
    mouseMoveTimeout = setTimeout(resetIdleTimer, 200);
  });

  document.addEventListener("visibilitychange", function () {
    if (document.hidden) {
      addBehaviorEvent("navigation", { action: "hidden" });
      sendBehavior(behaviorBuffer.slice());
      behaviorBuffer = [];
    } else {
      addBehaviorEvent("navigation", { action: "visible" });
    }
  });

  // Initialize Session Replay
  function initializeSessionReplay() {
    if (!sessionReplayEnabled) return;

    // Load rrweb dynamically
    var script = document.createElement('script');
    script.src = 'https://cdn.jsdelivr.net/npm/rrweb@latest/dist/rrweb.min.js';
    script.onload = function() {
      if (window.rrweb) {
        console.log("🎥 Session replay initialized");
        
        // Check if current URL should be blocked
        var currentPath = window.location.pathname;
        var blockedUrls = window.__BLOCKED_URLS__ || [];
        var isBlocked = blockedUrls.some(function(url) {
          return currentPath.includes(url);
        });

        if (isBlocked) {
          console.log("🚫 Session replay blocked for URL:", currentPath);
          return;
        }

        sessionReplayRecorder = window.rrweb.record({
          emit: function(event) {
            sessionReplayBuffer.push(event);
            
            // Send events in batches
            if (sessionReplayBuffer.length >= 50) {
              sendSessionReplay(sessionReplayBuffer.slice());
              sessionReplayBuffer = [];
            }
          },
          // Privacy settings from configuration
          maskAllInputs: window.__MASK_ALL_INPUTS__ !== false,
          maskInputOptions: {
            password: window.__MASK_PASSWORDS__ !== false,
            email: window.__MASK_EMAILS__ !== false,
            tel: window.__MASK_PHONES__ !== false,
            text: window.__MASK_TEXT_INPUTS__ === true
          },
          // Custom selectors to mask
          maskTextSelector: window.__MASK_CUSTOM_SELECTORS__ || [],
          // Performance settings
          recordCanvas: false,
          recordCrossOriginIframes: false,
          collectFonts: false,
          // Sampling rate (1 = 100%, 0.1 = 10%)
          sampling: {
            scroll: 150, // ms
            mouseInteraction: 0, // ms
            input: 0, // ms
            media: 0, // ms
            mousemove: 50, // ms
            mouseleave: 0, // ms
            mouseenter: 0, // ms
            focus: 0, // ms
            blur: 0, // ms
            touchstart: 0, // ms
            touchmove: 0, // ms
            touchend: 0, // ms
          }
        });
      }
    };
    document.head.appendChild(script);
  }

  setInterval(function () {
    if (behaviorBuffer.length > 0) {
      sendBehavior(behaviorBuffer.slice());
      behaviorBuffer = [];
    }
    
    // Send session replay events periodically
    if (sessionReplayBuffer.length > 0) {
      sendSessionReplay(sessionReplayBuffer.slice());
      sessionReplayBuffer = [];
    }
  }, 10000);

  window.addEventListener("beforeunload", function () {
    track("pageview_end");
    if (behaviorBuffer.length > 0) {
      sendBehavior(behaviorBuffer.slice());
    }
    
    // Send final session replay events
    if (sessionReplayBuffer.length > 0) {
      sendSessionReplay(sessionReplayBuffer.slice());
    }
    
    // Stop session replay recording
    if (sessionReplayRecorder) {
      sessionReplayRecorder();
    }
  });

  console.log("Analytics tracker initialized with:", { 
    trackingId, 
    projectId, 
    apiUrl, 
    behaviorUrl, 
    sessionReplayUrl,
    sessionReplayEnabled 
  });
  
  track("pageview");
  resetIdleTimer();
  initializeSessionReplay();

  window.trackEvent = function (eventName, eventData) {
    track("event", { event_name: eventName, event_data: eventData });
  };
})(window.__TRACKING_ID__, window.__PROJECT_ID__);
