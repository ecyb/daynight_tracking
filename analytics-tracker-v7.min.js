(function(trackingId, projectId, apiUrl, behaviorUrl) {
  var pageLoadTime = Date.now();
  var behaviorBuffer = [];
  var lastScrollDepth = 0;
  var lastActivityTime = Date.now();
  var clickTimes = [];
  var isIdle = false;
  var idleTimeout = null;

  function getSessionId() {
    var sessionId = sessionStorage.getItem('analytics_session');
    if (!sessionId) {
      sessionId = 'sess_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now();
      sessionStorage.setItem('analytics_session', sessionId);
    }
    return sessionId;
  }

  function getUTMParams() {
    var params = new URLSearchParams(window.location.search);
    return {
      utm_source: params.get('utm_source'),
      utm_medium: params.get('utm_medium'),
      utm_campaign: params.get('utm_campaign')
    };
  }

  function sendRequest(url, data) {
    // Always use fetch with no-cors to avoid CORS warnings
    return fetch(url, {
      method: 'POST',
      mode: 'no-cors',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data)
    }).then(function() {
      return true;
    }).catch(function(error) {
      console.error('Request failed:', error);
      return false;
    });
  }

  function trackEvent(eventType, eventData) {
    var payload = {
      tracking_id: trackingId,
      session_id: getSessionId(),
      event_type: eventType,
      path: window.location.pathname,
      referrer: document.referrer || null,
      user_agent: navigator.userAgent,
      screen_width: screen.width,
      screen_height: screen.height,
      viewport_width: window.innerWidth,
      viewport_height: window.innerHeight,
      language: navigator.language,
      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
      duration: eventType === 'pageview' ? Date.now() - pageLoadTime : null
    };

    // Add UTM parameters
    var utmParams = getUTMParams();
    payload.utm_source = utmParams.utm_source;
    payload.utm_medium = utmParams.utm_medium;
    payload.utm_campaign = utmParams.utm_campaign;

    // Add event-specific data
    if (eventData) {
      payload.event_name = eventData.name;
      payload.event_data = eventData.data;
    }

    console.log('Tracking event:', eventType, payload);

    sendRequest(apiUrl, payload).then(function(success) {
      if (success) {
        console.log('Track success: sent via no-cors fetch');
      } else {
        console.error('Analytics error: request failed');
      }
    });
  }

  function addBehaviorEvent(type, data) {
    behaviorBuffer.push({
      type: type,
      data: data,
      path: window.location.pathname,
      timestamp: Date.now()
    });
    console.log('Behavior event added:', type, 'Buffer size:', behaviorBuffer.length);
  }

  function sendBehaviorEvents() {
    if (behaviorBuffer.length === 0) return;

    var payload = {
      projectId: projectId,
      sessionId: getSessionId(),
      events: behaviorBuffer.slice()
    };

    console.log('Sending behavior events:', behaviorBuffer.length);

    sendRequest(behaviorUrl, payload).then(function(success) {
      if (success) {
        console.log('Behavior tracking success: sent via no-cors fetch');
        behaviorBuffer = [];
      } else {
        console.error('Behavior tracking error: request failed');
      }
    });
  }

  // Scroll tracking
  function trackScroll() {
    var scrollDepth = Math.round((window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100);
    if (scrollDepth > lastScrollDepth && scrollDepth % 25 === 0) {
      addBehaviorEvent('scroll', { depth: scrollDepth, position: window.scrollY });
      lastScrollDepth = scrollDepth;
    }
  }

  // Click tracking
  function trackClick(event) {
    var target = event.target;
    var clickData = {
      x: event.clientX,
      y: event.clientY,
      tag: target.tagName.toLowerCase(),
      id: target.id || null,
      className: target.className || null,
      text: target.textContent ? target.textContent.substring(0, 100) : null,
      href: target.href || null
    };

    // Track rage clicks (multiple clicks in same area within 1 second)
    var now = Date.now();
    var recentClicks = clickTimes.filter(function(time) { return now - time < 1000; });
    recentClicks.push(now);
    clickTimes = recentClicks;

    if (recentClicks.length >= 3) {
      addBehaviorEvent('rage_click', clickData);
    } else {
      addBehaviorEvent('click', clickData);
    }
  }

  // Form interaction tracking
  function trackFormInteraction(event) {
    var target = event.target;
    if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.tagName === 'SELECT') {
      addBehaviorEvent('form_interaction', {
        type: event.type,
        field: target.name || target.id || 'unnamed',
        tag: target.tagName.toLowerCase()
      });
    }
  }

  // Idle time tracking
  function resetIdleTimer() {
    lastActivityTime = Date.now();
    if (isIdle) {
      isIdle = false;
      addBehaviorEvent('idle_end', { duration: Date.now() - lastActivityTime });
    }
    clearTimeout(idleTimeout);
    idleTimeout = setTimeout(function() {
      isIdle = true;
      addBehaviorEvent('idle_start', { timestamp: Date.now() });
    }, 30000); // 30 seconds
  }

  // Page visibility tracking
  function trackVisibilityChange() {
    if (document.hidden) {
      addBehaviorEvent('page_hidden', { timestamp: Date.now() });
    } else {
      addBehaviorEvent('page_visible', { timestamp: Date.now() });
    }
  }

  // Navigation tracking
  function trackNavigation() {
    addBehaviorEvent('navigation', {
      from: document.referrer,
      to: window.location.href,
      timestamp: Date.now()
    });
  }

  // Initialize tracking
  function init() {
    console.log('Analytics tracker initialized with:', {
      trackingId: trackingId,
      projectId: projectId,
      apiUrl: apiUrl,
      behaviorUrl: behaviorUrl
    });

    // Track initial pageview
    trackEvent('pageview');

    // Set up event listeners
    window.addEventListener('scroll', trackScroll, { passive: true });
    document.addEventListener('click', trackClick, { passive: true });
    document.addEventListener('input', trackFormInteraction, { passive: true });
    document.addEventListener('change', trackFormInteraction, { passive: true });
    document.addEventListener('focus', trackFormInteraction, { passive: true });
    document.addEventListener('blur', trackFormInteraction, { passive: true });

    // Activity tracking for idle detection
    ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'].forEach(function(event) {
      document.addEventListener(event, resetIdleTimer, { passive: true });
    });

    // Page visibility tracking
    document.addEventListener('visibilitychange', trackVisibilityChange, { passive: true });

    // Navigation tracking
    window.addEventListener('beforeunload', function() {
      trackNavigation();
      sendBehaviorEvents();
    });

    // Send behavior events periodically
    setInterval(sendBehaviorEvents, 10000); // Every 10 seconds

    // Send behavior events on page unload
    window.addEventListener('pagehide', sendBehaviorEvents);
  }

  // Start tracking
  init();

})(window.__TRACKING_ID__, window.__PROJECT_ID__, window.__API_URL__, window.__BEHAVIOR_URL__);
